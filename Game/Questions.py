# Upto 50 Questions are there in the Game. So, whenever the player plays again it mostly not get the same question.

questions = [
    [
        "What is the output?\n\ndef foo(x, y=[]):\n    y.append(x)\n    return y\n\nprint(foo(1))\nprint(foo(2))",
        "[1], [2]",
        "[1], [1, 2]",
        "[1, 2], [1, 2]",
        "Error",
        "[1], [1, 2]",
    ],
    [
        "Which of these will cause a SyntaxError?",
        "'hello' + 5",
        "'5' * 3",
        "5 + int('5')",
        "int('1_000')",
        "'hello' + 5",
    ],
    [
        "What will be the output?\n\nx = [[0] * 3] * 3\nx[0][0] = 1\nprint(x)",
        "[[1, 0, 0], [0, 0, 0], [0, 0, 0]]",
        "[[1, 0, 0], [1, 0, 0], [1, 0, 0]]",
        "[[1, 0, 0], [0, 0, 0], [0, 0, 0]]",
        "[[0, 0, 0], [0, 0, 0], [1, 0, 0]]",
        "[[1, 0, 0], [1, 0, 0], [1, 0, 0]]",
    ],
    [
        "Which one of the following will correctly open a file for reading encoded in UTF-8?",
        "open('file.txt', 'rb')",
        "open('file.txt', 'rt')",
        "open('file.txt', 'r', encoding='utf-8')",
        "open('file.txt', encoding='ascii')",
        "open('file.txt', 'r', encoding='utf-8')",
    ],
    [
        "What is the output of:\n\nprint(any([]))",
        "True",
        "False",
        "None",
        "Error",
        "False",
    ],
    [
        "What is the output?\n\nx = (i*i for i in range(3))\nprint(list(x))\nprint(list(x))",
        "[0, 1, 4], [0, 1, 4]",
        "[0, 1, 4], []",
        "generator object, generator object",
        "None, None",
        "[0, 1, 4], []",
    ],
    [
        "Which of the following modules is used for serialization in Python?",
        "jsonify",
        "pickle",
        "marshal",
        "serialize",
        "pickle",
    ],
    [
        "What is the output?\n\nx = {'a':1, 'b':2}\nprint(x.get('c', 3))",
        "KeyError",
        "None",
        "3",
        "True",
        "3",
    ],
    [
        "What does the 'nonlocal' keyword do in Python?",
        "Declares a variable global",
        "Creates a new local variable",
        "Allows assignment to a variable in the nearest enclosing scope that is not global",
        "Raises error if variable is undefined",
        "Allows assignment to a variable in the nearest enclosing scope that is not global",
    ],
    [
        "What is the output?\n\nprint(''.join(sorted('abc', reverse=True)))",
        "abc",
        "cba",
        "bac",
        "bca",
        "cba",
    ],
    [
        "Which method can be used to convert a list into a tuple?",
        "tuple()",
        "convert()",
        "tolist()",
        "tupleize()",
        "tuple()",
    ],
    [
        "What is the result of:\n\nbool('False') == False",
        "True",
        "False",
        "SyntaxError",
        "None",
        "False",
    ],
    [
        "Which statement is true about Python lists?",
        "They are immutable",
        "They are ordered and mutable",
        "They are unordered and immutable",
        "They are like sets",
        "They are ordered and mutable",
    ],
    [
        "What is the output?\n\nx = [i for i in range(3)]\nx[0] = 10\nprint(x)",
        "[0, 1, 2]",
        "[10, 1, 2]",
        "[0, 10, 2]",
        "[0, 1, 10]",
        "[10, 1, 2]",
    ],
    [
        "What is the output?\n\nprint(type(lambda x: x))",
        "<class 'function'>",
        "<type 'lambda'>",
        "<class 'lambda'>",
        "<class 'method'>",
        "<class 'function'>",
    ],
    [
        "Which of the following is a mutable built-in type?",
        "tuple",
        "frozenset",
        "str",
        "dict",
        "dict",
    ],
    [
        "What is the output?\n\nx = [1, 2, 3]\ny = x\nx.append(4)\nprint(y)",
        "[1, 2, 3]",
        "[1, 2, 3, 4]",
        "[4]",
        "[1, 2, 3], [1, 2, 3, 4]",
        "[1, 2, 3, 4]",
    ],
    [
        "What is the output?\n\nprint(0.1 + 0.2 == 0.3)",
        "True",
        "False",
        "None",
        "Error",
        "False",
    ],
    [
        "What is the output?\n\ndef foo():\n    try:\n        return 1\n    finally:\n        return 2\n\nprint(foo())",
        "1",
        "2",
        "None",
        "Error",
        "2",
    ],
    [
        "What happens if you call sys.exit() in a Python script?",
        "It prints 'exit' and stops the script",
        "It raises a SyntaxError",
        "It raises SystemExit and halts execution",
        "It closes the terminal window",
        "It raises SystemExit and halts execution",
    ],
    [
        "Which Python data type guarantees uniqueness and is unordered?",
        "list",
        "tuple",
        "dict",
        "set",
        "set",
    ],
    [
        "What is the output?\n\nx = [1, 2, 3]\nprint(x.pop(1))\nprint(x)",
        "2, [1, 3]",
        "1, [2, 3]",
        "3, [1, 2]",
        "2, [2, 3]",
        "2, [1, 3]",
    ],
    [
        "What is the correct syntax for a decorator?",
        "@decorator",
        "#decorator",
        "decorator()",
        "def @decorator():",
        "@decorator",
    ],
    [
        "What is the output?\n\nx = [1, 2, 3]\nprint(x * 2)",
        "[1, 2, 3, 1, 2, 3]",
        "[2, 4, 6]",
        "Error",
        "None",
        "[1, 2, 3, 1, 2, 3]",
    ],
    [
        "Which of these statements about Python generators is true?",
        "They store the entire sequence in memory",
        "They return one value at a time using yield",
        "They use return instead of yield",
        "They are faster than list comprehensions in all cases",
        "They return one value at a time using yield",
    ],
    [
        "What will be the output?\n\ndef foo(a, b, c):\n    print(a, b, c)\n\nargs = (1, 2)\nfoo(*args, 3)",
        "1 2 3",
        "1 (2, 3)",
        "Error",
        "(1, 2) 3",
        "1 2 3",
    ],
    [
        "Which of the following is a valid set declaration?",
        "set = {}",
        "myset = set()",
        "myset = []",
        "myset = dict()",
        "myset = set()",
    ],
    [
        "What is the result of:\n\nprint(isinstance(True, int))",
        "False",
        "True",
        "None",
        "Error",
        "True",
    ],
    [
        "What is the output?\n\ndef make():\n    return lambda x: x**2\n\nsquare = make()\nprint(square(3))",
        "6",
        "9",
        "Error",
        "<function>",
        "9",
    ],
    [
        "What is the output of:\n\nlist(map(len, ['hi', 'hello', 'python']))",
        "[2, 5, 6]",
        "[1, 1, 1]",
        "[2, 5, 5]",
        "[2, 4, 6]",
        "[2, 5, 6]",
    ],
    [
        "Which of the following keywords is used to handle exceptions?",
        "if",
        "throw",
        "catch",
        "try",
        "try",
    ],
    [
        "What is the output?\n\nprint({i: i*i for i in range(3)})",
        "{0: 0, 1: 1, 2: 4}",
        "[0, 1, 2]",
        "{0, 1, 4}",
        "(0, 1, 4)",
        "{0: 0, 1: 1, 2: 4}",
    ],
    [
        "Which of these is not a valid Python keyword?",
        "assert",
        "def",
        "lambda",
        "function",
        "function",
    ],
    [
        "What is the output?\n\nx = (lambda a: lambda b: a + b)(2)\nprint(x(3))",
        "5",
        "6",
        "23",
        "Error",
        "5",
    ],
    [
        "Which of the following statements is true about Python namespaces?",
        "They are unique identifiers for modules only",
        "They are dictionaries mapping names to objects",
        "They are immutable sets",
        "They are local variables only",
        "They are dictionaries mapping names to objects",
    ],
    [
        "What is the output?\n\nx = {0: 'zero', 1: 'one'}\nprint(x.get(2, 'two'))",
        "Error",
        "None",
        "2",
        "'two'",
        "'two'",
    ],
    [
        "What does the walrus operator ':=' do?",
        "Ends a loop early",
        "Defines a function",
        "Assigns and returns value in expression",
        "Creates a generator",
        "Assigns and returns value in expression",
    ],
    [
        "What is the output?\n\nprint('5' > 2)", 
        "True", 
        "False", 
        "Error", 
        "None", 
        "Error"],
    [
        "Which of the following best describes a Python metaclass?",
        "A class used to define methods",
        "A blueprint for class decorators",
        "A class of a class",
        "A special type of object method",
        "A class of a class",
    ],
    [
        "What is the output?\n\nx = [1, 2, 3]\nprint(id(x) == id(x[:]))",
        "True",
        "False",
        "Depends on system",
        "Error",
        "False",
    ],
    [
        "Which of these best describes duck typing?",
        "Type checking using isinstance",
        "Strict adherence to types",
        "Object validity by method/property presence",
        "Use of decorators for types",
        "Object validity by method/property presence",
    ],
    [
        "What is the output?\n\nfrom collections import defaultdict\nd = defaultdict(int)\nd['a'] += 1\nprint(d['a'])",
        "0",
        "1",
        "Error",
        "None",
        "1",
    ],
    [
        "Which of these operators can overload object equality in Python?",
        "__compare__",
        "__match__",
        "__eq__",
        "__same__",
        "__eq__",
    ],
    [
        "What is the result?\n\nprint(set('abc') == set('cba'))",
        "False",
        "Error",
        "True",
        "None",
        "True",
    ],
    [
        "What is the output?\n\nprint([None] * 3)",
        "[0, 0, 0]",
        "[None, None, None]",
        "[null, null, null]",
        "[None]",
        "[None, None, None]",
    ],
    [
        "How do you check if all items in a list are truthy in Python?",
        "any(list)",
        "filter(list)",
        "reduce(list)",
        "all(list)",
        "all(list)",
    ],
    [
        "Which exception is raised when accessing a missing dict key without 'get'?",
        "AttributeError",
        "KeyError",
        "IndexError",
        "ValueError",
        "KeyError",
    ],
    [
        "What does the dir() function return?",
        "All files in current directory",
        "Documentation of a module",
        "List of valid attributes of an object",
        "Debug info",
        "List of valid attributes of an object",
    ],
    [
        "Which of these types is unordered?",
        "list",
        "tuple",
        "dict (Python 3.7+)",
        "set",
        "set",
    ],
    [
        "What is the output?\n\nprint(type(int('10')))",
        "<class 'str'>",
        "<class 'int'>",
        "<class 'float'>",
        "<class 'bool'>",
        "<class 'int'>",
    ],
    [
        "How are tuples different from lists?",
        "Lists are faster",
        "Tuples are immutable",
        "Tuples can't store strings",
        "Lists can't be iterated",
        "Tuples are immutable",
    ],
    [
        "Which of the following is NOT a core data type in Python?",
        "list",
        "tuple",
        "class",
        "set",
        "class",
    ],
    [
        "What is the output?\n\nprint(bool(' '))",
        "False",
        "True",
        "None",
        "Error",
        "True",
    ],
]

# Money settings according to the question 

levels = [1000, 2000, 3000, 5000, 10000, 20000, 40000, 80000, 160000, 320000, 640000, 1250000, 2500000, 5000000, 10000000, 30000000, 70000000]

# Commitments or say sentences to entertain the player or can say creating suspense

Commitments = [
        "🧠 You're about to unlock your brain's full power...",
        "🤯 Did you just level up mentally?",
        "🎓 Loading genius mode...",
        "🥸  Was that a big brain moment?",
        "💵 This might be your million-dollar answer!",
        "😱 Feeling the pressure yet?",
        "😈 Careful... one wrong move and it's game over!",
        "❓ Still confident?",
        "🐍 Time to flex those Python muscles...",
        "🧪 Got that logic flowing?",
        "😵 Think twice. This one's spicy!",
        "🔥 Did you feel the heat?",
        "🫥  You're dancing with danger now...",
        "😬 Still on fire or slightly crispy?",
        "😇 The code gods are watching you now...",
        "❓ Did you impress them?",
        "🤔 This question is hiding something...",
        "❓ Did you catch the trick?",
        "😲 You're one step closer to greatness...",
        "🫨  Can you taste victory yet?",
        "🤔 What you are thinking...",
        "❓ Did you guessed it right?",
        "⚠️  Warning: Brain overclocking in progress...",
        "❓ Did your neurons survive that?",
        "😷 You just entered the logic maze...",
        "❓ Did you find the exit or hit a wall?",
        "🤔 This one's trickier than it looks...",
        "🫵  Were you fooled or focused?",  
        "😤 Breathe in, breathe out... and answer!",
        "🔓 Still calm or totally cracked?",
        "🫨  Python whisperers know this one...",
        "❓ Are you one of them?",
        "🤫 Okay Let's See!"
    ]
